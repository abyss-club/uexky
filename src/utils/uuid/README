UUID Generator Design
---------------------

This an distributed-supported uuid generator. Storage in 60bit integer, Display
in 10 charactor base64-like string.

1. Storage and Generator

1.1 Storage Format

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |0 0 0 0|                      Timestamp                         
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
           |   Worker ID     |  Sequence Number  |   Ramdom Bits   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

1.2 Timestamp: 32bit

  Seconds from '2018-03-01T00:00:00Z'.

1.3 Worker ID: 9bit

  Get from only one mongoDB (sets), self-increase id. 9bit-long means there are 
  maxium 512 worker running in same time.

  Each worker must set an TTL for worker id. TTL is:

    3600 + Random[0, 3600] seconds.

1.4 Sequence Number: 10bit

  Generated by worker, self-increase number. from 0 increase to 1023, and back
  to 0 again. 

  Sequence number must be unique in one second. If sequence is exhausted,
  generator must wait for next second.

  Considering worker id and sequence, this generator can generate 2^19 uuid per
  second. It's a big number.

1.5 Ramdom bits: 9bit

  No special requirements.

2. Display Format

  Storage format is design for easily to saving, indexing and comparing in 
  database. It's hard to read and remember. For this reason, converting it to
  base64-like string to display.

  For randomness in visual, place frequently changing parts at begin and end of
  the string.
 
2.1 Charactors

  every 6bit convert to these caractors (from 000000 to 111111):

    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';

2.2 Rule

    Decode storage format to display format: reverse 32bit timestamp, and
    conver every 6bit to charactors in order. Encoding is reverse processing.
