// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package auth

import (
	"github.com/google/wire"
	"gitlab.com/abyss.club/uexky/adapter"
	"gitlab.com/abyss.club/uexky/lib/mail"
	"gitlab.com/abyss.club/uexky/lib/redis"
	"gitlab.com/abyss.club/uexky/mocks"
)

// Injectors from wire.go:

func InitAuthService() (*Service, error) {
	client, err := redis.NewClient()
	if err != nil {
		return nil, err
	}
	repo := &Repo{
		Redis: client,
	}
	adapter := mail.NewAdapter()
	service := &Service{
		Repo: repo,
		Mail: adapter,
	}
	return service, nil
}

func InitMockAuthService() (*Service, error) {
	client, err := redis.NewClient()
	if err != nil {
		return nil, err
	}
	repo := &Repo{
		Redis: client,
	}
	mailAdapter := &mocks.MailAdapter{}
	service := &Service{
		Repo: repo,
		Mail: mailAdapter,
	}
	return service, nil
}

// wire.go:

var mailSet = wire.NewSet(wire.Bind(new(adapter.MailAdapter), new(*mail.Adapter)), mail.NewAdapter)

var mockMailSet = wire.NewSet(wire.Bind(new(adapter.MailAdapter), new(*mocks.MailAdapter)), wire.Struct(new(mocks.MailAdapter), "*"))

var InfraSet = wire.NewSet(redis.NewClient)

var ServiceSet = wire.NewSet(
	mailSet, wire.Struct(new(Repo), "*"), wire.Struct(new(Service), "*"),
)

var MockServiceSet = wire.NewSet(
	mockMailSet, wire.Struct(new(Repo), "*"), wire.Struct(new(Service), "*"),
)
