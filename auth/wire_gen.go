// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package auth

import (
	"github.com/google/wire"
	"gitlab.com/abyss.club/uexky/lib/mail"
	"gitlab.com/abyss.club/uexky/lib/postgres"
	"gitlab.com/abyss.club/uexky/lib/redis"
	"gitlab.com/abyss.club/uexky/mocks"
	"gitlab.com/abyss.club/uexky/repo"
	"gitlab.com/abyss.club/uexky/uexky"
	"gitlab.com/abyss.club/uexky/uexky/adapter"
	"gitlab.com/abyss.club/uexky/uexky/entity"
)

// Injectors from wire.go:

func InitAuthService() (*Service, error) {
	client, err := redis.NewClient()
	if err != nil {
		return nil, err
	}
	userRepo := &repo.UserRepo{
		Redis: client,
	}
	r := R{
		User: userRepo,
	}
	repoImpl := &RepoImpl{}
	adapter := mail.NewAdapter()
	db, err := postgres.NewDB()
	if err != nil {
		return nil, err
	}
	txAdapter := &postgres.TxAdapter{
		DB: db,
	}
	entityRepo := repo.NewRepo(client)
	service, err := uexky.NewService(txAdapter, entityRepo)
	if err != nil {
		return nil, err
	}
	authService := &Service{
		R:     r,
		Repo:  repoImpl,
		Mail:  adapter,
		Uexky: service,
	}
	return authService, nil
}

func InitMockAuthService() (*Service, error) {
	client, err := redis.NewClient()
	if err != nil {
		return nil, err
	}
	userRepo := &repo.UserRepo{
		Redis: client,
	}
	r := R{
		User: userRepo,
	}
	repoImpl := &RepoImpl{}
	mailAdapter := &mocks.MailAdapter{}
	db, err := postgres.NewDB()
	if err != nil {
		return nil, err
	}
	txAdapter := &postgres.TxAdapter{
		DB: db,
	}
	entityRepo := repo.NewRepo(client)
	service, err := uexky.NewService(txAdapter, entityRepo)
	if err != nil {
		return nil, err
	}
	authService := &Service{
		R:     r,
		Repo:  repoImpl,
		Mail:  mailAdapter,
		Uexky: service,
	}
	return authService, nil
}

// wire.go:

var mailSet = wire.NewSet(wire.Bind(new(adapter.MailAdapter), new(*mail.Adapter)), mail.NewAdapter)

var mockMailSet = wire.NewSet(wire.Bind(new(adapter.MailAdapter), new(*mocks.MailAdapter)), wire.Struct(new(mocks.MailAdapter), "*"))

var repoSet = wire.NewSet(wire.Bind(new(Repo), new(*RepoImpl)), wire.Struct(new(RepoImpl), "*"), wire.Bind(new(entity.UserRepo), new(*repo.UserRepo)), wire.Struct(new(repo.UserRepo), "*"), wire.Struct(new(R), "*"))

var ServiceSet = wire.NewSet(
	repoSet,
	mailSet, uexky.ServiceSet, wire.Struct(new(Service), "*"),
)

var MockServiceSet = wire.NewSet(
	repoSet,
	mockMailSet, uexky.ServiceSet, wire.Struct(new(Service), "*"),
)
