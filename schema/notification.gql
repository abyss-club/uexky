extend type Query {
  # The count of unread notifications.
  unreadNotiCount: Int!
  # Notifications for current user.
  notification(query: SliceQuery!): NotiSlice!
}

enum NotiType {
  system
  replied
  quoted
}

# NotiSlice object is for selecting specific 'slice' of an object to return.
# Affects the returning SliceInfo.
type NotiSlice {
  notifications: [Notification!]!
  sliceInfo: SliceInfo!
}

type Notification {
  # Type of Notification. "system", "replied" or "quoted".
  type: NotiType!
  # Time when a notify event triggers. E.g. The time when a system event is
  # announced from the server.
  eventTime: Time!
  # The notification is read or not.
  hasRead: Boolean!
  # notification content for different type.
  content: NotiContent!
}

union NotiContent = SystemNoti | RepliedNoti | QuotedNoti

# Object describing a system notification.
type SystemNoti {
  # Notification title.
  title: String!
  # Markdown formatted notification content.
  content: String!
}

type ThreadOutline {
  id: UID!
  title: String
  content: String!
  mainTag: String!
  subTags: [String!]!
}

type PostOutline {
  author: String!
  content: String!
}

# Object describing a replied notification.
type RepliedNoti {
  # The thread object that is replied.
  thread: ThreadOutline!
  # count of replies from last read this notification
  newReplyCount: Int!
  # first new reply from last read this notification
  newReplyId: UID!
}

# Object describing a quoted notification.
type QuotedNoti {
  # The thread id that is quoted in.
  threadId: UID!
  # The post object that is quoted.
  quotedPost: PostOutline!
  # The post object that made this notification.
  post: PostOutline!
}
