extend type Query {
  """ A user profile object."""
  profile: User!
}

extend type Mutation {
  """ Register/Login via email address.
  An email containing sign info will be sent to the provided email address. 'redirectTo' must start as '/'.
  If the user succeed signed in, will be go to `redirectTo` or `/` (if not specified). """
  emailAuth(email: String!, redirectTo: String): Boolean!
  """ Set the Name of user."""
  setName(name: String!): User!
  """ Directly edit tags subscribed by user."""
  syncTags(tags: [String!]!): User!
  """ Add tags subscribed by user."""
  addSubbedTag(tag: String!): User!
  """ Delete tags subscribed by user."""
  delSubbedTag(tag: String!): User!

  """ Operations for moderators."""
  banUser(postId: UID, threadId: UID): Boolean!
}

enum Role {
  """ Administrators """
  admin
  """ Moderators """
  mod
  """ Normal role, default value for signed up user """
  normal
  """ For not signed up user """
  guest
  """ Banned user """
  banned
}

type User {
  """ Only exists when the user has signed up via email. """
  email: String
  """ The Name of user. Required when not posting anonymously."""
  name: String
  """ Tags subscribed by the user."""
  tags: [String!]
  """ Current role of the user."""
  role: Role!

  # Threads published by the user.
  threads(query: SliceQuery!): ThreadSlice!
  # Threads replied by the user.
  posts(query: SliceQuery!): PostSlice!
}
