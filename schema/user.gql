extend type Query {
  """ A user profile object."""
  profile: User!
}

extend type Mutation {
  """ Register/Login via email address.
  An email containing login info will be sent to the provided email address."""
  auth(email: String!): Boolean!
  """ Set the Name of user."""
  setName(name: String!): User!
  """ Directly edit tags subscribed by user."""
  syncTags(tags: [String!]!): User!
  """ Add tags subscribed by user."""
  addSubbedTag(tag: String!): User!
  """ Delete tags subscribed by user."""
  delSubbedTag(tag: String!): User!

  """ Operations for moderators."""
  banUser(postId: UID, threadId: UID): Boolean!
  """ Operations for moderators."""
  blockPost(postId: UID!): Post!
  """ Operations for moderators."""
  lockThread(threadId: UID!): Thread!
  """ Operations for moderators."""
  blockThread(threadId: UID!): Thread!
  """ Operations for moderators."""
  editTags(threadId: UID!, mainTag: String!, subTags: [String!]!): Thread!
}

enum Role {
  admin
  mod
  normal
  guest
  banned
}

type User {
  email: String
  # The Name of user. Required when not posting anonymously.
  name: String
  # Tags saved by user.
  tags: [String!]
  # user roles:
  role: Role!

  # Threads published by the user.
  threads(query: SliceQuery!): ThreadSlice!
  # Threads replied by the user.
  posts(query: SliceQuery!): PostSlice!
}
