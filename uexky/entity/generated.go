// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package entity

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"gitlab.com/abyss.club/uexky/lib/uid"
)

type NotiSlice struct {
	System    []*SystemNoti  `json:"system"`
	Replied   []*RepliedNoti `json:"replied"`
	Quoted    []*QuotedNoti  `json:"quoted"`
	SliceInfo *SliceInfo     `json:"sliceInfo"`
}

type PostInput struct {
	ThreadID  uid.UID  `json:"threadId"`
	Anonymous bool     `json:"anonymous"`
	Content   string   `json:"content"`
	QuoteIds  []string `json:"quoteIds"`
}

type PostSlice struct {
	Posts     []*Post    `json:"posts"`
	SliceInfo *SliceInfo `json:"sliceInfo"`
}

type SliceInfo struct {
	FirstCursor string `json:"firstCursor"`
	LastCursor  string `json:"lastCursor"`
	HasNext     bool   `json:"hasNext"`
}

type SliceQuery struct {
	Before *string `json:"before"`
	After  *string `json:"after"`
	Limit  int     `json:"limit"`
}

type Tag struct {
	Name   string `json:"name"`
	IsMain bool   `json:"isMain"`
}

type ThreadCatalogItem struct {
	PostID    string    `json:"postId"`
	CreatedAt time.Time `json:"createdAt"`
}

type ThreadInput struct {
	Anonymous bool     `json:"anonymous"`
	Content   string   `json:"content"`
	MainTag   string   `json:"mainTag"`
	SubTags   []string `json:"subTags"`
	Title     *string  `json:"title"`
}

type ThreadSlice struct {
	Threads   []*Thread  `json:"threads"`
	SliceInfo *SliceInfo `json:"sliceInfo"`
}

type UnreadNotiCount struct {
	System  int `json:"system"`
	Replied int `json:"replied"`
	Quoted  int `json:"quoted"`
}

type NotiType string

const (
	NotiTypeSystem  NotiType = "system"
	NotiTypeReplied NotiType = "replied"
	NotiTypeQuoted  NotiType = "quoted"
)

var AllNotiType = []NotiType{
	NotiTypeSystem,
	NotiTypeReplied,
	NotiTypeQuoted,
}

func (e NotiType) IsValid() bool {
	switch e {
	case NotiTypeSystem, NotiTypeReplied, NotiTypeQuoted:
		return true
	}
	return false
}

func (e NotiType) String() string {
	return string(e)
}

func (e *NotiType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotiType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotiType", str)
	}
	return nil
}

func (e NotiType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin  Role = "admin"
	RoleMod    Role = "mod"
	RoleNormal Role = "normal"
	RoleGuest  Role = "guest"
	RoleBanned Role = "banned"
)

var AllRole = []Role{
	RoleAdmin,
	RoleMod,
	RoleNormal,
	RoleGuest,
	RoleBanned,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleMod, RoleNormal, RoleGuest, RoleBanned:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
